---
description: 
globs: 
---
---
description: Enforces .NET Framework method naming conventions
globs: "*.cs"
---
# .NET Framework Method Naming

<rule>
name: dotnet_method_naming
description: Ensures methods follow .NET Framework naming conventions and best practices
filters:
  - type: file_extension
    pattern: "\\.cs$"
  - type: content
    pattern: "\\b(?:public|private|protected|internal)\\s+(?:static\\s+)?[\\w<>\\[\\]]+\\s+[\\w]+\\s*\\("

actions:
  - type: reject
    conditions:
      - pattern: "\\b(?:public|private|protected|internal)\\s+(?:static\\s+)?[\\w<>\\[\\]]+\\s+[a-z]\\w*\\s*\\("
        message: "Method names must start with an uppercase letter"
      - pattern: "\\b(?:public|private|protected|internal)\\s+(?:static\\s+)?[\\w<>\\[\\]]+\\s+_\\w+\\s*\\("
        message: "Method names should not start with an underscore"
      - pattern: "\\b(?:public|private|protected|internal)\\s+(?:static\\s+)?[\\w<>\\[\\]]+\\s+Get_\\w+\\s*\\("
        message: "Avoid using underscores in method names"

  - type: suggest
    message: |
      Method naming guidelines:
      1. Use PascalCase
      2. Start with an uppercase letter
      3. Use verbs or verb phrases
      4. Common prefixes:
         - Get - for retrieving data
         - Set - for setting data
         - Is/Has/Can - for boolean returns
         - Calculate/Compute - for computations
         - Initialize/Init - for initialization
         - Validate - for validation
      5. Be descriptive about the operation
      6. Avoid Hungarian notation

examples:
  - input: |
      public void getData()
      private string get_UserName()
      protected bool isValid()
      internal void _initialize()
    output: |
      public void GetData()
      private string GetUserName()
      protected bool IsValid()
      internal void Initialize()

metadata:
  priority: high
  version: 1.0
</rule> 