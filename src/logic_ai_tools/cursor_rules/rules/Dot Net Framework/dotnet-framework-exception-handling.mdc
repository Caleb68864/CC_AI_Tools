---
description: 
globs: 
---
---
description: Enforces .NET Framework exception handling best practices
globs: "*.cs"
---
# .NET Framework Exception Handling

<rule>
name: dotnet_exception_handling
description: Ensures proper exception handling patterns and practices in .NET Framework
filters:
  - type: file_extension
    pattern: "\\.cs$"
  - type: content
    pattern: "(?:try|catch|throw|Exception)"

actions:
  - type: reject
    conditions:
      - pattern: "catch\\s*\\(\\s*Exception\\s*\\)"
        message: "Avoid catching generic Exception - catch specific exceptions"
      - pattern: "catch\\s*\\(\\s*\\)\\s*{"
        message: "Empty catch blocks are not allowed"
      - pattern: "throw\\s+ex\\s*;"
        message: "Use 'throw' instead of 'throw ex' to preserve stack trace"
      - pattern: "catch.*?{\\s*?return\\s*null\\s*?}"
        message: "Don't swallow exceptions by returning null"
      - pattern: "catch.*?{\\s*?//.*?\\s*?}"
        message: "Don't use empty catch blocks with comments"

  - type: suggest
    message: |
      Exception handling guidelines:
      1. Catch specific exceptions, not Exception
      2. Preserve the stack trace
      3. Don't swallow exceptions
      4. Use try-finally for cleanup
      5. Custom exceptions should:
         - End with 'Exception'
         - Inherit from Exception
         - Be serializable
      6. Include meaningful exception messages
      7. Log exceptions appropriately

examples:
  - input: |
      try {
          // Some code
      }
      catch (Exception ex) {
          return null;
      }

      try {
          // Some code
      }
      catch {
          // Just ignore
      }

      catch (Exception ex) {
          throw ex;
      }
    output: |
      try {
          // Some code
      }
      catch (InvalidOperationException ex) {
          Logger.LogError(ex);
          throw;
      }

      try {
          // Some code
      }
      catch (SqlException ex) {
          Logger.LogError(ex);
          throw new DatabaseException("Database operation failed", ex);
      }

      try {
          // Some code
      }
      finally {
          // Cleanup code
      }

metadata:
  priority: high
  version: 1.0
</rule> 