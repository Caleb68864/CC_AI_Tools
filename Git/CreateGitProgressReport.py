# This script is designed to generate a progress report based on the git commits in a specific branch. 
# It utilizes the GitPython library to interact with the Git repository and the OpenAI API to compile the progress report.

# The script starts by retrieving the current branch and its creation date. 
# The user has the option to provide the branch creation date through the command line or manually input it. 
# The script then retrieves the list of commits in the branch since its creation.

# The branch name is sanitized and used as the title of the progress report. 
# The report's title is generated dynamically and includes the branch name and the current date.

# The script then uses the OpenAI API to compile the progress report. 
# It starts with a prompt introducing the user as a seasoned Full Stack Developer and instructing them to create a progress report based on the given commits. 
# The prompt also specifies that the report must be less than a certain length.

# For each commit, the script appends its hexadecimal SHA and summary to the prompt, as long as the total length remains within the API's limit. 
# If the limit is exceeded, the loop breaks to ensure the prompt does not exceed the size limit.

# The script sends the prompt to the OpenAI API and retrieves the progress report generated by the model. 
# The report is then printed to the console.

# After displaying the progress report, the script prompts the user to copy it to the clipboard. 
# If the user confirms, the report is copied to the clipboard using the pyperclip library. 
# Otherwise, a message is displayed indicating that the report was not copied.

import os
import git
import openai
import re
import pyperclip
import datetime
import sys
from datetime import datetime
import dotenv
dotenv.load_dotenv()

# Setup API_KEY with your actual OpenAI API key in .env file in the same directory.
openai.api_key = os.getenv("API_KEY")

# create GitPython repo object
repo = git.Repo()

# get current branch and its creation date
branch = repo.active_branch
branch_name = branch.name

# branch_creation_date = "2023-03-27 10:15"
# check if the user provided a date in the command line
if len(sys.argv) > 1:
    branch_creation_date = sys.argv[1]
else:
    while True:
        branch_creation_date = input("Enter the branch creation date in yyyy-mm-dd HH:MM format: ")
        try:
            datetime.datetime.strptime(branch_creation_date, "%Y-%m-%d %H:%M")
            break
        except ValueError:
            print("Invalid date format. Please enter the date in yyyy-mm-dd HH:MM format.")

# get list of commits in branch after its creation
commits = list(repo.iter_commits(branch, since=branch_creation_date))


#for commit in commits:
#    print(commit.summary)

# sanitize branch name
title = re.sub(r'[^\w\s]', ' ', branch_name).replace('-', ' ').strip()

for i in range(10, 2, -1):
    title = title.replace(' ' * i, ' ').strip()

report_title = f"Progress Report for {title} on {datetime.now().strftime('%m/%d/%Y')}:\n"
report_length = 475 - len(report_title)

# compile progress report using OpenAI
prompt = (f"You are a seasoned Full Stack Developer.\n"
          f"You are high skilled at creating concise and readable progress reports.\n"

          #f"Commit: <Commit Title>\n"
          #f" - Files Updated:\n"
          #f"   - File Updated<>\n"
          #f"\n" 
          #f" - Changes Made:\n"
          #f"   - <Change Made>"
          #f"\n" 
          #f" - Commit Summary:\n"
          #f"   - <Commit Summary>"
          )
extraMsg = (f"Create a progress report based on the git Commit Logs below.\n"
          f"Summarized the Files Changed, Commit Comment and the Changes Made.\n"
          f"The Reports Title should be: {report_title}"
          f"The Report must be less than {report_length} characters.\n"
          f"Example Report:"
          f"<Report Title>:\n"
          f"<Summary of commit details less that {report_length} characters long.>")
          
for commit in commits:
    if "asdf" not in commit.summary:
        commit_string = f"<Begin Commit Log {commit.hexsha}>\n"
        commit_string += "Commit Message:\n"
        commit_string += f"{commit.message}\n"
        commit_string += "Commit Summary:\n"
        commit_string += f"{commit.summary}\n"
        #commit_string += "Commit Diffs:\n"
        # Get the diff object for the commit
        #diff = commit.diff()
        
        #print(diff)

        # Loop through the diff items and print the diff
        #for diff_item in diff:
            #changed_lines = diff_item.diff.split('\n')

            # Loop through the lines and print the changed lines
            #print(f"Diff for file: {diff_item.a_path}")
            #print("Changed lines:")
            #commit_string += f"Diff for file: {diff_item.a_path}\n"
            #commit_string += "Changed lines:\n"
            
            #for line in changed_lines:
                # Check if the line starts with "+" (added) or "-" (deleted)
                #if line.startswith('+') or line.startswith('-'):
                    #print(line)
                #commit_string += f'{line}\n'
                    #print("\n")

        commit_string += f"<End Commit Log {commit.hexsha}>\n"
        test = len(prompt) + len(commit_string)
        if test < 15999:
            prompt += commit_string
        else:
            break
        


#prompt += f"Report Title: {report_title}"


def getAIOutput(prompt, extraMsg):
    # Setup API_KEY with your actual OpenAI API key in .env file in the same directory.
    openai.api_key = os.getenv("API_KEY")
        
    max_prompt = 15999

    # print(prompt)
    prompt = prompt[:max_prompt]

    response = openai.ChatCompletion.create(
        # model="text-davinci-003",
        model="gpt-3.5-turbo-16k",
        #prompt=prompt,
        messages=[{"role": "system", "content": prompt}, {"role": "user", "content": extraMsg}],
        temperature=.2,
        max_tokens=1024,
        n=1,
        stop=None,
        timeout=30,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0,
    )

    return response['choices'][0]['message']['content'].strip()

# print(prompt)

progress_report = getAIOutput(prompt, extraMsg)

# output = f"Progress report for branch {branch}:\n\n{progress_report}"
# output = progress_report
#output = report_title + progress_report
output = progress_report

print("Git Progress Report:\n")
print(output)

# prompt user to copy progress report to clipboard
copy_to_clipboard = input("Do you want to copy the progress report to clipboard? (y/n): ")
if copy_to_clipboard.lower() == "y":
    pyperclip.copy(output)
    print("Progress report copied to clipboard!")
else:
    print("Progress report not copied to clipboard.")
